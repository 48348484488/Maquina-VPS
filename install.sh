#!/bin/bash
clear;echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━";echo "  🚀 Instalador Wine Pawn para VS Code v3.0";echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━";echo "";sleep 1;echo "🔍 [1/7] Verificando extensões do VS Code...";EXT_PAWN_INSTALLED=false;EXT_TASK_INSTALLED=false;if code --list-extensions 2>/dev/null|grep -q "southclaws.vscode-pawn";then EXT_PAWN_INSTALLED=true;echo "✓ southclaws.vscode-pawn já instalada";fi;if code --list-extensions 2>/dev/null|grep -q "sanaajani.taskrunnercode";then EXT_TASK_INSTALLED=true;echo "✓ sanaajani.taskrunnercode já instalada";fi;if [ "$EXT_PAWN_INSTALLED" = false ]&&[ "$EXT_TASK_INSTALLED" = false ];then echo "⚠️  Nenhuma extensão detectada";fi;sleep 1;echo "";echo "🧹 [2/7] Limpando diretório de trabalho...";sudo rm -rf pawno pawncc gamemodes .vscode 2>/dev/null;shopt -s dotglob nullglob;for item in *;do [ "$item" != ".git" ]&&sudo rm -rf "$item" 2>/dev/null;done;shopt -u dotglob nullglob;echo "✓ Diretório limpo com sucesso";sleep 1;echo "";echo "🍷 [3/7] Verificando Wine...";WINE_ALREADY_INSTALLED=false;if command -v wine >/dev/null 2>&1;then EXISTING_WINE_VER=$(wine --version 2>/dev/null);if [ -n "$EXISTING_WINE_VER" ];then echo "✓ Wine já instalado: $EXISTING_WINE_VER";WINE_ALREADY_INSTALLED=true;fi;fi;if [ "$WINE_ALREADY_INSTALLED" = false ];then echo "⏳ Instalando Wine 32-bit (2-5 minutos)...";echo "⏳ Aguarde... Este processo pode demorar.";echo "";sudo apt remove --purge wine wine32 wine64 -y >/dev/null 2>&1;sudo apt autoremove -y >/dev/null 2>&1;rm -rf ~/.wine;sudo dpkg --add-architecture i386 >/dev/null 2>&1;sudo apt update >/dev/null 2>&1;sudo mkdir -pm755 /etc/apt/keyrings >/dev/null 2>&1;sudo wget -q -O /etc/apt/keyrings/winehq-archive.key https://dl.winehq.org/wine-builds/winehq.key;sudo wget -q -NP /etc/apt/sources.list.d/ https://dl.winehq.org/wine-builds/ubuntu/dists/jammy/winehq-jammy.sources;sudo apt update >/dev/null 2>&1;sudo apt install --install-recommends winehq-stable -y >/dev/null 2>&1;mkdir -p /tmp/runtime-codespace;chmod 700 /tmp/runtime-codespace;export XDG_RUNTIME_DIR=/tmp/runtime-codespace;export WINEARCH=win32;export WINEPREFIX=~/.wine;export WINEDEBUG=-all;export DISPLAY=:0;wineboot -u >/dev/null 2>&1;if ! grep -q "WINEARCH=win32" ~/.bashrc;then echo -e "\n# Configuração Wine 32-bit" >> ~/.bashrc;echo "export XDG_RUNTIME_DIR=/tmp/runtime-codespace" >> ~/.bashrc;echo "export WINEARCH=win32" >> ~/.bashrc;echo "export WINEPREFIX=~/.wine" >> ~/.bashrc;echo "export WINEDEBUG=-all" >> ~/.bashrc;echo "export DISPLAY=:0" >> ~/.bashrc;fi;source ~/.bashrc;if command -v wine >/dev/null 2>&1;then WINE_VERSION=$(wine --version 2>/dev/null);echo "✓ Wine instalado com sucesso [$WINE_VERSION]";else echo "❌ Falha ao instalar Wine";fi;fi;sleep 1;echo "";echo "📦 [4/7] Verificando dependências...";DEPS_ALREADY_INSTALLED=true;MISSING_DEPS="";command -v unzip >/dev/null 2>&1||{ DEPS_ALREADY_INSTALLED=false;MISSING_DEPS="$MISSING_DEPS unzip";};command -v zip >/dev/null 2>&1||{ DEPS_ALREADY_INSTALLED=false;MISSING_DEPS="$MISSING_DEPS zip";};command -v wget >/dev/null 2>&1||{ DEPS_ALREADY_INSTALLED=false;MISSING_DEPS="$MISSING_DEPS wget";};command -v curl >/dev/null 2>&1||{ DEPS_ALREADY_INSTALLED=false;MISSING_DEPS="$MISSING_DEPS curl";};if [ "$DEPS_ALREADY_INSTALLED" = true ];then echo "✓ Todas as dependências já instaladas";else echo "⚠️  Instalando dependências:$MISSING_DEPS";sudo apt install -y unzip zip wget curl >/dev/null 2>&1;echo "✓ Dependências instaladas com sucesso";fi;sleep 1;echo "";clear;echo "⚙️  [5/7] Configurando ambiente de desenvolvimento...";echo "⏳ Baixando task.zip...";wget -q https://github.com/48348484488/Maquina-VPS/raw/74c1d4876c3342d3df52d7db0142fef90f05f4bd/task.zip 2>&1;if [ -f "task.zip" ];then TASK_SIZE=$(du -h task.zip|cut -f1);echo "✓ Download concluído [$TASK_SIZE]";echo "";echo "📂 Extraindo configurações...";unzip -q -o task.zip;rm -f task.zip;if [ -d "vscode" ];then mv vscode .vscode 2>/dev/null;fi;if [ -d ".vscode" ]&&[ -f ".vscode/tasks.json" ];then echo "✓ Ambiente configurado [tasks.json criado]";else echo "❌ Erro na configuração do ambiente";exit 1;fi;else echo "❌ Falha no download do task.zip";echo "⚠️  Tentando download alternativo...";wget --no-check-certificate -q https://github.com/48348484488/Maquina-VPS/raw/74c1d4876c3342d3df52d7db0142fef90f05f4bd/task.zip 2>&1;if [ -f "task.zip" ];then echo "✓ Download alternativo concluído";unzip -q -o task.zip;rm -f task.zip;[ -d "vscode" ]&&mv vscode .vscode 2>/dev/null;echo "✓ Ambiente configurado";else echo "❌ Falha total no download do task.zip";exit 1;fi;fi;sleep 1;echo "";echo "🔌 [6/7] Instalando extensões do VS Code...";if [ "$EXT_PAWN_INSTALLED" = true ]&&[ "$EXT_TASK_INSTALLED" = true ];then echo "✓ Extensões já instaladas - pulando";else if [ "$EXT_PAWN_INSTALLED" = false ];then echo "⏳ Instalando southclaws.vscode-pawn...";code --install-extension southclaws.vscode-pawn >/dev/null 2>&1;fi;if [ "$EXT_TASK_INSTALLED" = false ];then echo "⏳ Instalando sanaajani.taskrunnercode...";code --install-extension sanaajani.taskrunnercode >/dev/null 2>&1;fi;sleep 2;EXT_PAWN=$(code --list-extensions 2>/dev/null|grep -c "southclaws.vscode-pawn");EXT_TASK=$(code --list-extensions 2>/dev/null|grep -c "sanaajani.taskrunnercode");TOTAL_EXT=$((EXT_PAWN + EXT_TASK));if [ "$TOTAL_EXT" -eq 2 ];then echo "✓ Extensões confirmadas [2/2]";elif [ "$TOTAL_EXT" -eq 1 ];then echo "⚠️  Extensões parcialmente instaladas [1/2]";echo "⚠️  Solução: Atualize a página (F5) e tente novamente";else echo "❌ Erro ao instalar extensões";echo "❌ Solução: Atualize a página (F5) e execute o script novamente";fi;fi;sleep 1;echo "";clear;echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━";echo "  📥 [7/7] Download do Arquivo MediaFire";echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━";echo "";echo "Insira a URL completa do MediaFire:";echo "(Ex: https://www.mediafire.com/file/XXXXXXXXX/arquivo.zip/file)";echo "";read -p "🔗 URL: " MEDIAFIRE_URL;echo "";if [ -z "$MEDIAFIRE_URL" ];then echo "⚠️  URL não fornecida - pulando download";echo "✓ Instalação concluída sem arquivos externos";elif echo "$MEDIAFIRE_URL"|grep -q "mediafire.com";then echo "✓ URL do MediaFire detectada";echo "";FILE_ID=$(echo "$MEDIAFIRE_URL"|grep -oP '(?<=file/)[^/]+'|head -1);if [ -z "$FILE_ID" ];then echo "❌ Erro: Não foi possível extrair ID da URL";echo "⚠️  Continuando sem download...";else echo "✓ ID do arquivo: $FILE_ID";echo "";FILENAME=$(echo "$MEDIAFIRE_URL"|grep -oP '(?<=/)[^/]+(?=/file)'|head -1);[ -z "$FILENAME" ]||[ "$FILENAME" = "file" ]&&FILENAME="gamemode.zip";echo "☁️  Obtendo link direto do MediaFire...";DIRECT_LINK=$(curl -sL "$MEDIAFIRE_URL"|grep -oP 'https://download[0-9]+\.mediafire\.com/[^"]+'|head -1);if [ -z "$DIRECT_LINK" ];then echo "❌ Não foi possível obter o link direto";echo "⚠️  Verifique se a URL está correta";else clear;echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━";echo "  📥 Download em Progresso";echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━";echo "";echo "⬇️  Baixando arquivo do MediaFire...";echo "⏳ Aguarde, isso pode levar alguns momentos...";echo "";wget -q "$DIRECT_LINK" -O "$FILENAME" 2>&1;if [ -f "$FILENAME" ];then FILE_SIZE=$(du -h "$FILENAME"|cut -f1);echo "";echo "✓ Download concluído [$FILE_SIZE]";echo "";echo "🔍 Verificando tipo de arquivo...";if unzip -t "$FILENAME" 2>&1|grep -qi "password\|encrypted";then echo "";echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━";echo "  🔒 ARQUIVO PROTEGIDO POR SENHA";echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━";echo "";MAX_ATTEMPTS=5;ATTEMPT=0;while [ $ATTEMPT -lt $MAX_ATTEMPTS ];do ATTEMPT=$((ATTEMPT + 1));echo "📌 Tentativa $ATTEMPT de $MAX_ATTEMPTS";echo "";read -p "🔑 Digite a senha: " PASSWORD;if [ -z "$PASSWORD" ];then echo "";echo "⚠️  Operação cancelada pelo usuário";echo "📁 Arquivo mantido: $FILENAME";break;fi;echo "";echo "⏳ Verificando senha e extraindo...";if unzip -q -o -P "$PASSWORD" "$FILENAME" 2>/dev/null;then rm -f "$FILENAME";echo "";echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━";echo "  ✅ EXTRAÇÃO CONCLUÍDA COM SUCESSO!";echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━";break;else if [ $ATTEMPT -lt $MAX_ATTEMPTS ];then echo "";echo "❌ Senha incorreta! Tente novamente.";echo "";else echo "";echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━";echo "  ❌ LIMITE DE TENTATIVAS ATINGIDO";echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━";echo "";echo "📁 Arquivo mantido: $FILENAME";echo "💡 Execute o comando manualmente:";echo "   unzip -P 'sua_senha' $FILENAME";fi;fi;done;else echo "✅ Arquivo sem proteção detectado";echo "";echo "📂 Extraindo arquivos...";if unzip -q -o "$FILENAME" 2>/dev/null;then rm -f "$FILENAME";echo "✅ Extração concluída!";else echo "❌ Erro durante a extração";echo "📁 Arquivo mantido: $FILENAME";fi;fi;else echo "❌ Falha no download";fi;fi;fi;else echo "❌ URL inválida - deve ser do MediaFire";fi;echo "";sleep 1;echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━";echo "  ✅ INSTALAÇÃO CONCLUÍDA";echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━";echo "";echo "🔧 COMPONENTES INSTALADOS:";echo "";if command -v wine >/dev/null 2>&1;then WINE_VER=$(wine --version 2>/dev/null|head -n1);echo "  ✅ Wine: $WINE_VER";echo "     └─ Arquitetura: win32";echo "     └─ Prefix: ~/.wine";else echo "  ❌ Wine: NÃO INSTALADO";fi;echo "";if [ -d "pawncc" ];then PAWNCC_SIZE=$(du -sh pawncc 2>/dev/null|cut -f1);echo "  ✅ Compilador Pawn";echo "     └─ Localização: $(pwd)/pawncc";echo "     └─ Tamanho: $PAWNCC_SIZE";elif [ -d "pawno" ];then PAWNO_SIZE=$(du -sh pawno 2>/dev/null|cut -f1);echo "  ✅ Compilador Pawn";echo "     └─ Localização: $(pwd)/pawno";echo "     └─ Tamanho: $PAWNO_SIZE";else echo "  ⚠️  Compilador Pawn: Aguardando arquivo do MediaFire";fi;echo "";if command -v code >/dev/null 2>&1;then VSCODE_VER=$(code --version 2>/dev/null|head -n1);echo "  ✅ Visual Studio Code: $VSCODE_VER";else echo "  ❌ VS Code: Não detectado";fi;echo "";echo "🔌 EXTENSÕES:";echo "";if code --list-extensions 2>/dev/null|grep "southclaws.vscode-pawn" >/dev/null;then echo "  ✅ southclaws.vscode-pawn";else echo "  ❌ southclaws.vscode-pawn (NÃO INSTALADA)";fi;if code --list-extensions 2>/dev/null|grep "sanaajani.taskrunnercode" >/dev/null;then echo "  ✅ sanaajani.taskrunnercode";else echo "  ❌ sanaajani.taskrunnercode (NÃO INSTALADA)";fi;echo "";echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━";echo "  🎯 COMO USAR";echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━";echo "";echo "1️⃣  Crie seus scripts .pwn na pasta gamemodes/";echo "2️⃣  Abra o arquivo no VS Code";echo "3️⃣  Pressione Ctrl+Shift+B para compilar";echo "4️⃣  O arquivo .amx será gerado automaticamente";echo "";echo "💡 Dica: Use Ctrl+Shift+P → 'Run Task' para mais opções";echo "";echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
